*MIS - FIT*

*Overview*:
MIS-FIT is an MIS for MFIs. It is a web application written in Ruby using the Merb framework. It is designed to support the core activities of an MFI with support for extensive customisation and easy extensibility. MIS-FIT is currently optimised for the Grameen methodology of having Branches, Centers and Clients. However, due to its customisability, it is possible to optimise the software for other business models.

*Live Demo*
 To see a live demo of the software, please go to http://mostfit.intellecap.in/ and login as admin with password "password". Feel free to play around with the application there. To get a copy of the source code or if you have more questions, please email svs@intellecap.net


*FEATURES*
* *Open source*
  The source code of the application is completely open and free for you to use and modify. This means that you are never at the mercy of a single vendor for customisation and code continuity.
* *Completely customisable*
  Does your loan behave strangely? Payment holidays, fees, insurance? No problem. MISFIT is architected to handle any payment profile.
* *Localisable*
  Have MISFIT in your local language
* *Audit Trail*
  Who did what to whom and when. Complete logging of all actions taken by data entry staff and everyone else. 
* *Reports*
  Robust reporting functionality
* *Scalable*
   Tested with 200,000 clients with no degradation in service.
* *Access control*
  Decide who gets to do what with which data. Have read only access for your bankers and investors. Keep approvals out of reach of staff.
* *Dashboard*
  Get an overview of your MFI at any level - Branch, center or region
* *Mobile ready*
  MISFIT can be manipulated through SMS.
* *RESTful interface*
  Provide data to other applications using XML or JSON. Can speak with an accounting system or core banking system or whatever.

*CUSTOMISATION*

Clearly, all MFIs have pecularities in their business model which will require customisation of the application. The application has therefore been built with customisation in mind. 

  <p>*Loan Types*<br>
    The Loan model is the core of the application and defines how a loan will behave. It consists of all the vrious properties of the loan (including custom properties) as well as the logic which calculates the loan schedule, it's defaulted status and other such characteristics of the loan. An MFI can have unlimited loan products simply be overriding the default behaviour. There is built in support for fees and upfront charges but any number of arbitrary properties and payments may be specified for a loan type. *The loan model is endlessly customisable*. Whether one wishes to track loan usage or disburse in tranches, all behaviour can be customised.</p>

  <p>*User Roles*<br>

    As of now, there exist four user roles in the system - read only, data entry, manager and admin - but these can be customised to suit your requirements. Coupled with the audit trail, these features are indispensible in the security of your application.</p>

  <p>*Reporting*<br>
    One of the main purposes of the MIS is reporting and MIS-FIT offers totally customisable reports based on what management wnats to see. Reports can also be customised for funders, donors, investors, etc.</p>

  <p>*Business Models*<br>
    If your business model does not follow the classic Grameen methodology, the application can be customised to suit your requirements.</p>

  <p>*Web Service*<br>
    The application understands and speaks XML, JSON and YML and is built in a REST-ful manner, which means that it can speak with other software in your ecosystem, including account software and core banking systems.</p>

  <p>*Backoffice Management*<br>
  The application provides for complete backoffice management including management of Branches, Centers, Client KYC and Staff Members. It can be customised to suit your methodology of operating as well as calculating incentives, etc. This module can laster be extended into payroll, attendance and asset tracking.</p>


*TECHNICAL SPECIFICATIONS* 
The application is written in Ruby using the Merb MVC framework. The Ruby language and the merb framework make for a robust development and production environment. They not only enable rapid code development but also help to keep the codebase extremely lean and clean. Here are some summary statistics for the codebase.


| Name                 | Lines   | LOC     | Classes | Modules | Methods |
| Controllers          |    1744 |    1448 |      29 |      10 |     161 |
| Helpers              |     239 |     204 |       0 |      26 |      13 |
| Models               |    2019 |    1626 |      22 |      13 |     179 |
| Spec                 |    2579 |    2073 |       1 |       0 |       1 |
| Lib                  |     716 |     464 |      44 |       4 |      58 |
| Total                |    7297 |    5815 |      96 |      53 |     412 |

   Code LOC: 3278     Test LOC: 2073     Code to test radio:  1:0.63

As can be seen, the Controllers + Models (basically the core of the application) is a mere 3700 lines of code. This makes it extremely easy to customise. The dynamic nature of Ruby makes it possible to override even core functionality of the application, leading to a total control over the application's behaviour.

As can also be seen from the above list, there exist comprehensive tests for the application's behaviour. This gives confidence that the application will behave as expected even after heavy customisation. We follow principles of test-driven development and so we have great confidence in the code we produce.

*APPLICATION ARCHITECTURE*

The application is built on an MVC framework. The various models in it are

attendancy.rb			   
audit_trail.rb
branch.rb			   
center.rb
client.rb			   
date_parser.rb
funder.rb			   
funding_line.rb
loan.rb				   
payment.rb			   
staff_member.rb
user.rb                            
loan_history.rb


As can be seen, the application has been kept simple. It follows the Grameen model of Branch > Center > Client, however, this hierarchy can be arbitrarily extended to include District, Region, Group, etc.

The Controller controls who gets to see and do what, a critical part of any financial application. We have implemented four basic roles to users - read only, data entry, manager and admin - but more roles with specific rights can be implemented. There is also support for an audit trail to keep track of user activities.

*Key Features*
# Small code base which enables
# Totally cutomisable behaviour
# Backoffice management - Branch, center, client, staff members
# Unlimited loan products
# Completely customisable loan behaviours and validations.
# User rights and roles
# Audit trail
# Staff performance monitor
# Completely customisable reports
# Funder management
# Complete web service architecture.




